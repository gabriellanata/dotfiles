#!/usr/bin/env bash

set -euo pipefail

### Argument Parsing ###

if git diff --quiet --staged; then
    echo "Error: No staged changes to commit"
    exit 1
fi

# Get arguments for operations
title=""
base_branch=""
signoff=""
verbose=""
while [[ $# -gt 0 ]]; do
    case $1 in
    -t | --title)
        title="$2"
        shift
        shift
        ;;
    -B | --base)
        if [[ "$2" == -* ]]; then
            # If $2 starts with "-" no branch was passed and we should run a fzf search for a base branch
            base_branch=$(git-select-branch)
        else
            base_branch="$2"
            shift
        fi
        shift
        ;;
    --signoff)
        signoff=true
        shift
        ;;
    --no-signoff)
        signoff=false
        shift
        ;;
    -v | --verbose)
        verbose=true
        shift
        ;;
    --quiet)
        verbose=false
        shift
        ;;
    -*)
        echo "Unknown option $1"
        exit 1
        ;;
    *)
        echo "Error: Unknown argument '$1'"
        exit 1
        ;;
    esac
done

# Check if base branch is empty
if [[ -z "$base_branch" ]]; then
    base_branch=$(git-select-branch)
fi

# Fail if base branch is master or main
if [[ "$base_branch" == "master" || "$base_branch" == "main" ]]; then
    echo "Error: Base branch cannot be master or main"
    exit 1
fi

# If base branch is "recent", find the most recently modified local branch
if [[ "$base_branch" == "recent" || "$base_branch" == "previous" || "$base_branch" == "latest" ]]; then
    # if current branch is master or main, use recent-branch
    current_branch=$(git branch --show-current)
    if [[ "$current_branch" == "master" || "$current_branch" == "main" ]]; then
        base_branch=$(git-recent-branch)
    else
        base_branch="$current_branch"
    fi
    echo "Using recent base branch: $base_branch"
fi

# Check if title is empty
if [[ -z "$title" ]]; then
    title="fixup"
fi

# Fill the args
commit_args=()

if [[ "$signoff" == true ]]; then
    commit_args+=("--signoff")
elif [[ "$signoff" == false ]]; then
    commit_args+=("--no-signoff")
fi

if [[ "$verbose" == true ]]; then
    commit_args+=("--verbose")
    set -x
else
    commit_args+=("--quiet")
fi

### Execute Commands ###

run_with_env() {
    env GIT_PILE_VERBOSE="$verbose" "$@"
}

# If the base branch is the current branch we just need to push the current commit
if [[ "$base_branch" == "$(git branch --show-current)" ]]; then
    run_with_env git commit --no-edit -m "$title" "${commit_args[@]}"
    run_with_env git push
    exit 0
fi

# Find first non-fixup commit from base_branch
if ! base_sha=$(git-root-commit "$base_branch"); then
    echo "Error: Could not find root commit for $base_branch"
    exit 1
fi

echo "Base SHA: $base_sha of $base_branch"

run_with_env git commit --no-edit -m "$title" "${commit_args[@]}"
run_with_env git-updatepr "$base_sha"
